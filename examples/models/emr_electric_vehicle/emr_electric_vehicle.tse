version = 4.2

//
// Saved by sw version: 2022.2
//

model "emr_electric_vehicle" {
    configuration {
        hil_device = "HIL402"
        hil_configuration_id = 1
        simulation_method = exact
        simulation_time_step = auto
        simulation_discret_scaling = 1.0
        dsp_timer_periods = 100e-6, 50e-3
        ss_calc_method = "systematic elimination"
        enb_pole_shift = True
        enb_gds_oversampling = True
        show_modes = False
        device_ao_limit_enable = False
        reset_analog_outputs_on_sim_stop = True
        reset_digital_outputs_on_sim_stop = True
        vhil_adio_loopback = False
        cpl_stb = False
        enb_dep_sw_detect = False
        code_section = "internal memory"
        data_section = "internal memory"
        sys_sp_rate_1 = 0.0001
        sys_sp_rate_2 = 0.05
        sys_real_type_precision = "default"
        user_real_type_precision = "default"
        sys_cpu_optimization = "high"
        user_cpu_optimization = "high"
        user_cpu_part_option = "default"
        matrix_based_reduction = True
        cpl_dynamics_analysis = False
        export_ss_to_pickle = False
        ground_scope_core = False
        dss_num_tol = 1e-15
        cce_platform = "generic"
        cce_use_relative_names = False
        cce_type_mapping_real = "double"
        cce_type_mapping_uint = "unsigned int"
        cce_type_mapping_int = "int"
        cce_directory = ""
        cce_custom_type_int = ""
        cce_custom_type_uint = ""
        cce_custom_type_real = ""
        tunable_params = "component defined"
        sp_compiler_type = "C compiler"
        sig_stim = "off"
        export_resource_list = ""
        export_dependency_list = ""
        export_out_file = ""
        export_lock_top_level = True
        export_encrypt_library = True
        export_encrypt_resources = True
    }

    component Subsystem Root {
        component src_scada_input "Duty Cycle" {
            def_value = "0.5"
            execution_rate = "Ts"
            max = "1.0"
            min = "0.0"
            unit = ""
        }
        [
            position = 7720, 8208
        ]

        component Subsystem Battery {
            layout = static
            component gen_probe U {
            }
            [
                position = 7936, 7920
                rotation = left
            ]

            component gen_probe I {
            }
            [
                position = 7992, 7920
                rotation = left
            ]

            component src_constant "Battery Voltage" {
                execution_rate = "Ts"
                value = "V_batt"
            }
            [
                position = 7888, 8000
            ]

            port P1 {
                position = 40.0, -16.0
                kind = sp
                direction =  in
                sp_type {
                    default = inherit
                }
            }
            [
                position = 8040, 8000
                hide_name = True
            ]

            port P2 {
                position = 40.0, 16.0
                kind = sp
                direction =  out
                sp_type {
                    default = auto
                }
            }
            [
                position = 8040, 8064
                hide_name = True
                scale = -1, 1
            ]

            junction Junction1 sp
            [
                position = 7936, 8000
            ]

            junction Junction2 sp
            [
                position = 7936, 8000
            ]

            connect "Battery Voltage.out" Junction1 as Connection3
            connect U.in Junction2 as Connection6
            connect Junction2 Junction1 as Connection7
            connect P1 Junction2 as Connection8
            connect P2 I.in as Connection9

            mask {
                icon = "image(\'emr_images/emr_energy_source.svg\')"
                description = "Energy source block for Energetic Macroscopic Representation of models."

                block_type {
                    label = "Block type"
                    widget = combo
                    combo_values = "Simulation", "Estimation"
                    type = string
                    default_value = "Simulation"
                    no_evaluate

                    CODE property_value_changed
                        mdl.refresh_icon(container_handle)
                    ENDCODE
                }

                CODE define_icon
                    images = {"Simulation": "emr_images/emr_energy_source.svg",
                                "Estimation": "emr_images/emr_estimation_source.svg"}
                
                    block_type = mdl.get_property_value(mdl.prop(item_handle, "block_type"))
                    mdl.set_component_icon_image(item_handle, images[block_type])
                ENDCODE

                CODE open
                    from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                
                    dialog = RegularComponentPropertiesDialog(
                        component=component,
                        property_container=component.masks[-1],
                        current_diagram=current_diagram
                    )
                    dialog.exec_()
                    
                ENDCODE
            }

            CODE component_init
                component.unlink()
            ENDCODE
        }
        [
            position = 7680, 8128
            size = 80, 64
        ]

        component Subsystem Inverter {
            layout = static
            component gen_product Product1 {
            }
            [
                position = 7576, 8008
            ]

            component gen_product Product2 {
            }
            [
                position = 7576, 8088
                scale = -1, 1
            ]

            component gen_probe V_out {
            }
            [
                position = 7808, 7944
                rotation = left
            ]

            port P1 {
                position = -40.0, -16.0
                kind = sp
                direction =  out
                sp_type {
                    default = auto
                }
            }
            [
                position = 7256, 8000
                hide_name = True
            ]

            port P2 {
                position = -40.0, 16.0
                kind = sp
                direction =  in
                sp_type {
                    default = inherit
                }
            }
            [
                position = 7256, 8088
                hide_name = True
                scale = -1, 1
            ]

            port P3 {
                position = 40.0, -16.0
                kind = sp
                direction =  in
                sp_type {
                    default = inherit
                }
            }
            [
                position = 8040, 8008
                hide_name = True
            ]

            port P4 {
                position = 40.0, 16.0
                kind = sp
                direction =  out
                sp_type {
                    default = auto
                }
            }
            [
                position = 8040, 8080
                hide_name = True
                scale = -1, 1
            ]

            port P5 {
                position = 0.0, 32.0
                kind = sp
                direction =  out
                sp_type {
                    default = auto
                }
            }
            [
                position = 7512, 8224
                rotation = left
                hide_name = True
                scale = -1, 1
            ]

            junction Junction3 sp
            [
                position = 7808, 8008
            ]

            junction Junction4 sp
            [
                position = 7512, 8152
            ]

            connect P1 Product1.in as Connection12
            connect P2 Product2.out as Connection13
            connect V_out.in Junction3 as Connection14
            connect P3 Junction3 as Connection16
            connect P4 Product2.in as Connection17
            connect Product1.out Junction3 as Connection18
            [
                breakpoints = 7808, 8008
            ]
            connect Product2.in1 Junction4 as Connection20
            [
                breakpoints = 7632, 8096; 7632, 8152; 7616, 8152
            ]
            connect Junction4 Product1.in1 as Connection21
            [
                breakpoints = 7512, 8152; 7512, 8016
            ]
            connect P5 Junction4 as Connection22

            mask {
                icon = "image(\'emr_images/emr_mono_physical_converter_ctrl.svg\')"
                description = "Mono-physical converter block with control for Energetic Macroscopic Representation of models."

                block_type {
                    label = "Block type"
                    widget = combo
                    combo_values = "Simulation", "Estimation"
                    type = string
                    default_value = "Simulation"
                    no_evaluate

                    CODE property_value_changed
                        mdl.refresh_icon(container_handle)
                    ENDCODE
                }

                CODE define_icon
                    images = {"Simulation": "emr_images/emr_mono_physical_converter_ctrl.svg",
                                "Estimation": "emr_images/emr_mono_physical_converter_ctrl_estimation.svg"}
                
                    block_type = mdl.get_property_value(mdl.prop(item_handle, "block_type"))
                    mdl.set_component_icon_image(item_handle, images[block_type])
                ENDCODE

                CODE open
                    from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                
                    dialog = RegularComponentPropertiesDialog(
                        component=component,
                        property_container=component.masks[-1],
                        current_diagram=current_diagram
                    )
                    dialog.exec_()
                    
                ENDCODE
            }

            CODE component_init
                component.unlink()
            ENDCODE
        }
        [
            position = 7808, 8128
            size = 80, 64
        ]

        component Subsystem "Machine Inductance" {
            layout = static
            component gen_z_domain_transfer TF {
                a_coeff = "[1, -0.9946]"
                b_coeff = "[0.007679, 0.007665]"
            }
            [
                position = 7632, 8008
            ]

            component gen_sum Sum1 {
                signs = "+-"
            }
            [
                position = 7520, 8008
            ]

            component tm_delay "Unit Delay1" {
            }
            [
                position = 7792, 8008
            ]

            port P1 {
                position = -40.0, -16.0
                kind = sp
                direction =  out
                sp_type {
                    default = auto
                }
            }
            [
                position = 7256, 8000
                hide_name = True
            ]

            port P2 {
                position = -40.0, 16.0
                kind = sp
                direction =  in
                sp_type {
                    default = inherit
                }
            }
            [
                position = 7256, 8064
                hide_name = True
                scale = -1, 1
            ]

            port P3 {
                position = 40.0, -16.0
                kind = sp
                direction =  in
                sp_type {
                    default = inherit
                }
            }
            [
                position = 8040, 8008
                hide_name = True
            ]

            port P4 {
                position = 40.0, 16.0
                kind = sp
                direction =  out
                sp_type {
                    default = auto
                }
            }
            [
                position = 8040, 8072
                hide_name = True
                scale = -1, 1
            ]

            junction Junction1 sp
            [
                position = 7696, 8008
            ]

            connect TF.in Sum1.out as Connection2
            connect Sum1.in P1 as Connection9
            connect "Unit Delay1.out" P3 as Connection10
            connect P4 Sum1.in1 as Connection11
            [
                breakpoints = 7472, 8064; 7472, 8016
            ]
            connect "Unit Delay1.in" Junction1 as Connection13
            connect Junction1 TF.out as Connection14
            connect P2 Junction1 as Connection15

            mask {
                icon = "image(\'emr_images/emr_energy_accumulation.svg\')"
                description = "Energy accumulation block for Energetic Macroscopic Representation of models."

                block_type {
                    label = "Block type"
                    widget = combo
                    combo_values = "Simulation", "Estimation"
                    type = string
                    default_value = "Simulation"
                    no_evaluate

                    CODE property_value_changed
                        mdl.refresh_icon(container_handle)
                    ENDCODE
                }

                CODE define_icon
                    images = {"Simulation": "emr_images/emr_energy_accumulation.svg",
                                "Estimation": "emr_images/emr_energy_accumulation_estimation.svg"}
                
                    block_type = mdl.get_property_value(mdl.prop(item_handle, "block_type"))
                    mdl.set_component_icon_image(item_handle, images[block_type])
                ENDCODE

                CODE open
                    from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                
                    dialog = RegularComponentPropertiesDialog(
                        component=component,
                        property_container=component.masks[-1],
                        current_diagram=current_diagram
                    )
                    dialog.exec_()
                    
                ENDCODE
            }

            CODE component_init
                component.unlink()
            ENDCODE
        }
        [
            position = 7920, 8128
            size = 80, 64
        ]

        component Subsystem "DC Machine" {
            layout = static
            component gen_gain Gain1 {
                gain = "Kcfiexc_dcm"
            }
            [
                position = 7560, 8000
            ]

            component gen_gain Gain2 {
                gain = "Kcfiexc_dcm"
            }
            [
                position = 7560, 8064
                scale = -1, 1
            ]

            component gen_probe Torque {
            }
            [
                position = 7728, 7944
                rotation = left
            ]

            component gen_probe Speed {
            }
            [
                position = 7816, 7944
                rotation = left
            ]

            port P1 {
                position = -40.0, -16.0
                kind = sp
                direction =  out
                sp_type {
                    default = auto
                }
            }
            [
                position = 7256, 8000
                hide_name = True
            ]

            port P2 {
                position = -40.0, 16.0
                kind = sp
                direction =  in
                sp_type {
                    default = inherit
                }
            }
            [
                position = 7256, 8064
                hide_name = True
                scale = -1, 1
            ]

            port P3 {
                position = 40.0, -16.0
                kind = sp
                direction =  in
                sp_type {
                    default = inherit
                }
            }
            [
                position = 8040, 8000
                hide_name = True
            ]

            port P4 {
                position = 40.0, 16.0
                kind = sp
                direction =  out
                sp_type {
                    default = auto
                }
            }
            [
                position = 8040, 8064
                hide_name = True
                scale = -1, 1
            ]

            junction Junction1 sp
            [
                position = 7816, 8064
            ]

            junction Junction2 sp
            [
                position = 7728, 8000
            ]

            junction Junction3 sp
            [
                position = 7728, 8000
            ]

            junction Junction4 sp
            [
                position = 7816, 8064
            ]

            connect Gain1.out Junction2 as Connection8
            connect Gain2.in Junction1 as Connection5
            connect Gain1.in P1 as Connection11
            connect P2 Gain2.out as Connection12
            connect Torque.in Junction3 as Connection13
            connect Junction3 Junction2 as Connection14
            connect P3 Junction3 as Connection15
            connect Speed.in Junction4 as Connection16
            connect Junction4 Junction1 as Connection17
            connect P4 Junction4 as Connection18

            mask {
                icon = "image(\'emr_images/emr_multi_physical_converter.svg\')"
                description = "Multi-physical converter block for Energetic Macroscopic Representation of models."

                block_type {
                    label = "Block type"
                    widget = combo
                    combo_values = "Simulation", "Estimation"
                    type = string
                    default_value = "Simulation"
                    no_evaluate

                    CODE property_value_changed
                        mdl.refresh_icon(container_handle)
                    ENDCODE
                }

                CODE define_icon
                    images = {"Simulation": "emr_images/emr_multi_physical_converter.svg",
                                "Estimation": "emr_images/emr_multi_physical_converter_estimation.svg"}
                
                    block_type = mdl.get_property_value(mdl.prop(item_handle, "block_type"))
                    mdl.set_component_icon_image(item_handle, images[block_type])
                ENDCODE

                CODE open
                    from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                
                    dialog = RegularComponentPropertiesDialog(
                        component=component,
                        property_container=component.masks[-1],
                        current_diagram=current_diagram
                    )
                    dialog.exec_()
                    
                ENDCODE
            }

            CODE component_init
                component.unlink()
            ENDCODE
        }
        [
            position = 8048, 8128
            size = 80, 64
        ]

        component Subsystem Gearbox {
            layout = static
            component gen_gain Gain1 {
                gain = "red*eff_gear_diff"
            }
            [
                position = 7624, 8000
            ]

            component gen_gain Gain2 {
                gain = "red"
            }
            [
                position = 7624, 8064
                scale = -1, 1
            ]

            port P1 {
                position = -40.0, -16.0
                kind = sp
                direction =  out
                sp_type {
                    default = auto
                }
            }
            [
                position = 7256, 8000
                hide_name = True
            ]

            port P2 {
                position = -40.0, 16.0
                kind = sp
                direction =  in
                sp_type {
                    default = inherit
                }
            }
            [
                position = 7256, 8064
                hide_name = True
                scale = -1, 1
            ]

            port P3 {
                position = 40.0, -16.0
                kind = sp
                direction =  in
                sp_type {
                    default = inherit
                }
            }
            [
                position = 8040, 8000
                hide_name = True
            ]

            port P4 {
                position = 40.0, 16.0
                kind = sp
                direction =  out
                sp_type {
                    default = auto
                }
            }
            [
                position = 8040, 8064
                hide_name = True
                scale = -1, 1
            ]

            connect P2 Gain2.out as Connection1
            connect Gain1.in P1 as Connection2
            connect Gain1.out P3 as Connection3
            connect P4 Gain2.in as Connection4

            mask {
                icon = "image(\'emr_images/emr_mono_physical_converter.svg\')"
                description = "Mono-physical converter block for Energetic Macroscopic Representation of models."

                block_type {
                    label = "Block type"
                    widget = combo
                    combo_values = "Simulation", "Estimation"
                    type = string
                    default_value = "Simulation"
                    no_evaluate

                    CODE property_value_changed
                        mdl.refresh_icon(container_handle)
                    ENDCODE
                }

                CODE define_icon
                    images = {"Simulation": "emr_images/emr_mono_physical_converter.svg",
                                "Estimation": "emr_images/emr_mono_physical_converter_estimation.svg"}
                
                    block_type = mdl.get_property_value(mdl.prop(item_handle, "block_type"))
                    mdl.set_component_icon_image(item_handle, images[block_type])
                ENDCODE

                CODE open
                    from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                
                    dialog = RegularComponentPropertiesDialog(
                        component=component,
                        property_container=component.masks[-1],
                        current_diagram=current_diagram
                    )
                    dialog.exec_()
                    
                ENDCODE
            }

            CODE component_init
                component.unlink()
            ENDCODE
        }
        [
            position = 8160, 8128
            size = 80, 64
        ]

        component Subsystem Differential {
            layout = static
            component gen_gain Gain1 {
                gain = "1.0/2.0"
            }
            [
                position = 7440, 8000
            ]

            component gen_gain Gain2 {
                gain = "1.0/2.0"
            }
            [
                position = 7440, 8064
                scale = -1, 1
            ]

            component gen_sum Sum1 {
            }
            [
                position = 7536, 8064
                scale = -1, 1
            ]

            port P1 {
                position = -48.0, -16.0
                kind = sp
                direction =  out
                sp_type {
                    default = auto
                }
            }
            [
                position = 7256, 8000
                hide_name = True
            ]

            port P2 {
                position = -48.0, 16.0
                kind = sp
                direction =  in
                sp_type {
                    default = inherit
                }
            }
            [
                position = 7256, 8064
                hide_name = True
                scale = -1, 1
            ]

            port P3 {
                position = 48.0, -64.0
                kind = sp
                direction =  in
                sp_type {
                    default = inherit
                }
            }
            [
                position = 8040, 7904
                hide_name = True
            ]

            port P4 {
                position = 48.0, -32.0
                kind = sp
                direction =  out
                sp_type {
                    default = auto
                }
            }
            [
                position = 8040, 7968
                hide_name = True
                scale = -1, 1
            ]

            port P5 {
                position = 48.0, 32.0
                kind = sp
                direction =  in
                sp_type {
                    default = inherit
                }
            }
            [
                position = 8040, 8096
                hide_name = True
            ]

            port P6 {
                position = 48.0, 64.0
                kind = sp
                direction =  out
                sp_type {
                    default = auto
                }
            }
            [
                position = 8040, 8160
                hide_name = True
                scale = -1, 1
            ]

            junction Junction1 sp
            [
                position = 7936, 8000
            ]

            connect Gain2.in Sum1.out as Connection7
            connect Gain1.in P1 as Connection8
            connect P2 Gain2.out as Connection9
            connect P3 Junction1 as Connection11
            [
                breakpoints = 7936, 7904
            ]
            connect Junction1 Gain1.out as Connection12
            [
                breakpoints = 7936, 8000
            ]
            connect P5 Junction1 as Connection13
            connect Sum1.in P4 as Connection14
            [
                breakpoints = 7984, 8056; 7984, 7968
            ]
            connect Sum1.in1 P6 as Connection15
            [
                breakpoints = 7984, 8072; 7984, 8160
            ]

            mask {
                icon = "image(\'emr_images/emr_mono_physical_coupling.svg\')"
                description = "Mono-physical coupling block for Energetic Macroscopic Representation of models."

                block_type {
                    label = "Block type"
                    widget = combo
                    combo_values = "Simulation", "Estimation"
                    type = string
                    default_value = "Simulation"
                    no_evaluate

                    CODE property_value_changed
                        mdl.refresh_icon(container_handle)
                    ENDCODE
                }

                CODE define_icon
                    images = {"Simulation": "emr_images/emr_mono_physical_coupling.svg",
                                "Estimation": "emr_images/emr_mono_physical_coupling_estimation.svg"}
                
                    block_type = mdl.get_property_value(mdl.prop(item_handle, "block_type"))
                    mdl.set_component_icon_image(item_handle, images[block_type])
                ENDCODE

                CODE open
                    from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                
                    dialog = RegularComponentPropertiesDialog(
                        component=component,
                        property_container=component.masks[-1],
                        current_diagram=current_diagram
                    )
                    dialog.exec_()
                    
                ENDCODE
            }

            CODE component_init
                component.unlink()
            ENDCODE
        }
        [
            position = 8288, 8128
            size = 96, 160
        ]

        component Subsystem "Left Wheel" {
            layout = static
            component gen_gain Gain1 {
                gain = "1/Rwheel"
            }
            [
                position = 7616, 8000
            ]

            component gen_gain Gain2 {
                gain = "1/Rwheel"
            }
            [
                position = 7616, 8064
                scale = -1, 1
            ]

            component gen_probe Speed {
            }
            [
                position = 7432, 7936
                rotation = left
            ]

            component gen_probe Torque {
            }
            [
                position = 7504, 7936
                rotation = left
            ]

            port P1 {
                position = -40.0, -16.0
                kind = sp
                direction =  out
                sp_type {
                    default = auto
                }
            }
            [
                position = 7256, 8000
                hide_name = True
            ]

            port P2 {
                position = -40.0, 16.0
                kind = sp
                direction =  in
                sp_type {
                    default = inherit
                }
            }
            [
                position = 7256, 8064
                hide_name = True
                scale = -1, 1
            ]

            port P3 {
                position = 40.0, -16.0
                kind = sp
                direction =  in
                sp_type {
                    default = inherit
                }
            }
            [
                position = 8040, 8000
                hide_name = True
            ]

            port P4 {
                position = 40.0, 16.0
                kind = sp
                direction =  out
                sp_type {
                    default = auto
                }
            }
            [
                position = 8040, 8064
                hide_name = True
                scale = -1, 1
            ]

            junction Junction1 sp
            [
                position = 7432, 8064
            ]

            junction Junction2 sp
            [
                position = 7504, 8000
            ]

            junction Junction3 sp
            [
                position = 7432, 8064
            ]

            junction Junction4 sp
            [
                position = 7504, 8000
            ]

            connect Gain2.out Junction1 as Connection15
            connect Junction2 Gain1.in as Connection19
            connect Gain1.out P3 as Connection21
            connect Gain2.in P4 as Connection22
            connect Speed.in Junction3 as Connection23
            connect Junction3 Junction1 as Connection24
            connect P2 Junction3 as Connection25
            connect Torque.in Junction4 as Connection26
            connect Junction4 Junction2 as Connection27
            connect P1 Junction4 as Connection28

            mask {
                icon = "image(\'emr_images/emr_mono_physical_converter.svg\')"
                description = "Mono-physical converter block for Energetic Macroscopic Representation of models."

                block_type {
                    label = "Block type"
                    widget = combo
                    combo_values = "Simulation", "Estimation"
                    type = string
                    default_value = "Simulation"
                    no_evaluate

                    CODE property_value_changed
                        mdl.refresh_icon(container_handle)
                    ENDCODE
                }

                CODE define_icon
                    images = {"Simulation": "emr_images/emr_mono_physical_converter.svg",
                                "Estimation": "emr_images/emr_mono_physical_converter_estimation.svg"}
                
                    block_type = mdl.get_property_value(mdl.prop(item_handle, "block_type"))
                    mdl.set_component_icon_image(item_handle, images[block_type])
                ENDCODE

                CODE open
                    from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                
                    dialog = RegularComponentPropertiesDialog(
                        component=component,
                        property_container=component.masks[-1],
                        current_diagram=current_diagram
                    )
                    dialog.exec_()
                    
                ENDCODE
            }

            CODE component_init
                component.unlink()
            ENDCODE
        }
        [
            position = 8416, 8080
            size = 80, 64
        ]

        component Subsystem "Right Wheel" {
            layout = static
            component gen_gain Gain1 {
                gain = "1/Rwheel"
            }
            [
                position = 7664, 8000
            ]

            component gen_gain Gain2 {
                gain = "1/Rwheel"
            }
            [
                position = 7664, 8064
                scale = -1, 1
            ]

            component gen_probe Speed {
            }
            [
                position = 7464, 7944
                rotation = left
            ]

            component gen_probe Torque {
            }
            [
                position = 7536, 7944
                rotation = left
            ]

            port P1 {
                position = -40.0, -16.0
                kind = sp
                direction =  out
                sp_type {
                    default = auto
                }
            }
            [
                position = 7256, 8000
                hide_name = True
            ]

            port P2 {
                position = -40.0, 16.0
                kind = sp
                direction =  in
                sp_type {
                    default = inherit
                }
            }
            [
                position = 7256, 8064
                hide_name = True
                scale = -1, 1
            ]

            port P3 {
                position = 40.0, -16.0
                kind = sp
                direction =  in
                sp_type {
                    default = inherit
                }
            }
            [
                position = 8040, 8000
                hide_name = True
            ]

            port P4 {
                position = 40.0, 16.0
                kind = sp
                direction =  out
                sp_type {
                    default = auto
                }
            }
            [
                position = 8040, 8064
                hide_name = True
                scale = -1, 1
            ]

            junction Junction1 sp
            [
                position = 7464, 8064
            ]

            junction Junction2 sp
            [
                position = 7536, 8000
            ]

            junction Junction3 sp
            [
                position = 7464, 8064
            ]

            junction Junction4 sp
            [
                position = 7536, 8000
            ]

            connect Gain1.in Junction2 as Connection17
            connect Junction1 Gain2.out as Connection15
            connect Gain1.out P3 as Connection20
            connect P4 Gain2.in as Connection21
            connect Speed.in Junction3 as Connection22
            connect Junction3 Junction1 as Connection23
            connect P2 Junction3 as Connection24
            connect Torque.in Junction4 as Connection25
            connect Junction4 Junction2 as Connection26
            connect P1 Junction4 as Connection27

            mask {
                icon = "image(\'emr_images/emr_mono_physical_converter.svg\')"
                description = "Mono-physical converter block for Energetic Macroscopic Representation of models."

                block_type {
                    label = "Block type"
                    widget = combo
                    combo_values = "Simulation", "Estimation"
                    type = string
                    default_value = "Simulation"
                    no_evaluate

                    CODE property_value_changed
                        mdl.refresh_icon(container_handle)
                    ENDCODE
                }

                CODE define_icon
                    images = {"Simulation": "emr_images/emr_mono_physical_converter.svg",
                                "Estimation": "emr_images/emr_mono_physical_converter_estimation.svg"}
                
                    block_type = mdl.get_property_value(mdl.prop(item_handle, "block_type"))
                    mdl.set_component_icon_image(item_handle, images[block_type])
                ENDCODE

                CODE open
                    from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                
                    dialog = RegularComponentPropertiesDialog(
                        component=component,
                        property_container=component.masks[-1],
                        current_diagram=current_diagram
                    )
                    dialog.exec_()
                    
                ENDCODE
            }

            CODE component_init
                component.unlink()
            ENDCODE
        }
        [
            position = 8416, 8176
            size = 80, 64
        ]

        component Subsystem Coupling {
            layout = static
            component gen_sum Sum1 {
            }
            [
                position = 7552, 7864
            ]

            component gen_product Product1 {
            }
            [
                position = 7552, 7936
                scale = -1, 1
            ]

            component gen_product Product2 {
            }
            [
                position = 7568, 8088
                scale = -1, 1
            ]

            component src_scada_input lwh_ref {
                def_value = "1.0"
                execution_rate = "Ts"
                max = "2.0"
                min = "0"
                unit = ""
            }
            [
                position = 7600, 8008
            ]

            component src_scada_input rwh_ref {
                def_value = "1.0"
                execution_rate = "Ts"
                max = "2.0"
                min = "0"
                unit = ""
            }
            [
                position = 7584, 8184
            ]

            port P1 {
                position = -48.0, -16.0
                kind = sp
                direction =  out
                sp_type {
                    default = auto
                }
            }
            [
                position = 7968, 8024
                hide_name = True
                scale = -1, -1
            ]

            port P2 {
                position = -48.0, 16.0
                kind = sp
                direction =  in
                sp_type {
                    default = inherit
                }
            }
            [
                position = 7968, 7864
                hide_name = True
                scale = 1, -1
            ]

            port P3 {
                position = 48.0, -64.0
                kind = sp
                direction =  in
                sp_type {
                    default = inherit
                }
            }
            [
                position = 7192, 8088
                hide_name = True
                scale = -1, -1
            ]

            port P4 {
                position = 48.0, -32.0
                kind = sp
                direction =  out
                sp_type {
                    default = auto
                }
            }
            [
                position = 7192, 8008
                hide_name = True
                scale = 1, -1
            ]

            port P5 {
                position = 48.0, 32.0
                kind = sp
                direction =  in
                sp_type {
                    default = inherit
                }
            }
            [
                position = 7192, 7936
                hide_name = True
                scale = -1, -1
            ]

            port P6 {
                position = 48.0, 64.0
                kind = sp
                direction =  out
                sp_type {
                    default = auto
                }
            }
            [
                position = 7192, 7856
                hide_name = True
                scale = 1, -1
            ]

            junction Junction1 sp
            [
                position = 7808, 8024
            ]

            connect lwh_ref.out Product1.in1 as Connection10
            connect rwh_ref.out Product2.in1 as Connection11
            connect Sum1.out P2 as Connection12
            connect Product1.in Junction1 as Connection14
            connect Junction1 P1 as Connection15
            [
                breakpoints = 7808, 8024
            ]
            connect Product2.in Junction1 as Connection16
            connect P5 Product1.out as Connection19
            connect P3 Product2.out as Connection20
            connect P4 Sum1.in1 as Connection21
            [
                breakpoints = 7448, 8008; 7448, 7872
            ]
            connect Sum1.in P6 as Connection22

            mask {
                icon = "image(\'emr_images/emr_mono_physical_coupling.svg\')"
                description = "Mono-physical coupling block for Energetic Macroscopic Representation of models."

                block_type {
                    label = "Block type"
                    widget = combo
                    combo_values = "Simulation", "Estimation"
                    type = string
                    default_value = "Simulation"
                    no_evaluate

                    CODE property_value_changed
                        mdl.refresh_icon(container_handle)
                    ENDCODE
                }

                CODE define_icon
                    images = {"Simulation": "emr_images/emr_mono_physical_coupling.svg",
                                "Estimation": "emr_images/emr_mono_physical_coupling_estimation.svg"}
                
                    block_type = mdl.get_property_value(mdl.prop(item_handle, "block_type"))
                    mdl.set_component_icon_image(item_handle, images[block_type])
                ENDCODE

                CODE open
                    from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                
                    dialog = RegularComponentPropertiesDialog(
                        component=component,
                        property_container=component.masks[-1],
                        current_diagram=current_diagram
                    )
                    dialog.exec_()
                    
                ENDCODE
            }

            CODE component_init
                component.unlink()
            ENDCODE
        }
        [
            position = 8544, 8128
            scale = -1, -1
            size = 96, 160
        ]

        component Subsystem Chassis {
            layout = static
            component gen_sum Sum1 {
                signs = "+-"
            }
            [
                position = 7480, 8008
            ]

            component gen_z_domain_transfer TF {
                a_coeff = "[1, -1]"
                b_coeff = "[5e-8, 5e-8]"
            }
            [
                position = 7584, 8008
            ]

            component gen_gain Gain1 {
                gain = "[3.6]"
            }
            [
                position = 7888, 7920
            ]

            component tm_delay "Unit Delay1" {
            }
            [
                position = 7720, 8008
            ]

            component gen_probe V_speed {
            }
            [
                position = 8040, 7920
            ]

            port P1 {
                position = -40.0, -16.0
                kind = sp
                direction =  out
                sp_type {
                    default = auto
                }
            }
            [
                position = 7256, 8000
                hide_name = True
            ]

            port P2 {
                position = -40.0, 16.0
                kind = sp
                direction =  in
                sp_type {
                    default = inherit
                }
            }
            [
                position = 7256, 8064
                hide_name = True
                scale = -1, 1
            ]

            port P3 {
                position = 40.0, -16.0
                kind = sp
                direction =  in
                sp_type {
                    default = inherit
                }
            }
            [
                position = 8040, 8008
                hide_name = True
            ]

            port P4 {
                position = 40.0, 16.0
                kind = sp
                direction =  out
                sp_type {
                    default = auto
                }
            }
            [
                position = 8040, 8072
                hide_name = True
                scale = -1, 1
            ]

            junction Junction1 sp
            [
                position = 7800, 8008
            ]

            junction Junction2 sp
            [
                position = 7640, 8008
            ]

            connect TF.in Sum1.out as Connection2
            connect Sum1.in P1 as Connection71
            connect V_speed.in Gain1.out as Connection72
            connect "Unit Delay1.out" Junction1 as Connection78
            [
                breakpoints = 7792, 8008
            ]
            connect Junction1 Gain1.in as Connection79
            [
                breakpoints = 7800, 8008
            ]
            connect P3 Junction1 as Connection80
            connect P4 Sum1.in1 as Connection85
            [
                breakpoints = 7440, 8064
            ]
            connect TF.out Junction2 as Connection86
            connect Junction2 "Unit Delay1.in" as Connection87
            [
                breakpoints = 7648, 8008
            ]
            connect P2 Junction2 as Connection88

            mask {
                icon = "image(\'emr_images/emr_energy_accumulation.svg\')"
                description = "Energy accumulation block for Energetic Macroscopic Representation of models."

                block_type {
                    label = "Block type"
                    widget = combo
                    combo_values = "Simulation", "Estimation"
                    type = string
                    default_value = "Simulation"
                    no_evaluate

                    CODE property_value_changed
                        mdl.refresh_icon(container_handle)
                    ENDCODE
                }

                CODE define_icon
                    images = {"Simulation": "emr_images/emr_energy_accumulation.svg",
                                "Estimation": "emr_images/emr_energy_accumulation_estimation.svg"}
                
                    block_type = mdl.get_property_value(mdl.prop(item_handle, "block_type"))
                    mdl.set_component_icon_image(item_handle, images[block_type])
                ENDCODE

                CODE open
                    from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                
                    dialog = RegularComponentPropertiesDialog(
                        component=component,
                        property_container=component.masks[-1],
                        current_diagram=current_diagram
                    )
                    dialog.exec_()
                    
                ENDCODE
            }

            CODE component_init
                component.unlink()
            ENDCODE
        }
        [
            position = 8672, 8128
            size = 80, 64
        ]

        component Subsystem Environment {
            layout = static
            component gen_product Product1 {
            }
            [
                position = 8176, 8008
            ]

            component gen_gain Gain1 {
                gain = "Kaero"
            }
            [
                position = 8264, 8008
            ]

            port P1 {
                position = 40.0, -16.0
                kind = sp
                direction =  in
                sp_type {
                    default = inherit
                }
            }
            [
                position = 8040, 8064
                hide_name = True
                scale = -1, 1
            ]

            port P2 {
                position = 40.0, 16.0
                kind = sp
                direction =  out
                sp_type {
                    default = auto
                }
            }
            [
                position = 8040, 8000
                hide_name = True
            ]

            junction Junction1 sp
            [
                position = 8112, 8000
            ]

            connect Gain1.in Product1.out as Connection5
            connect Product1.in1 Junction1 as Connection12
            connect Junction1 Product1.in as Connection13
            [
                breakpoints = 8112, 8000
            ]
            connect P2 Junction1 as Connection14
            connect P1 Gain1.out as Connection15

            mask {
                icon = "image(\'emr_images/emr_energy_source.svg\')"
                description = "Energy source block for Energetic Macroscopic Representation of models."

                block_type {
                    label = "Block type"
                    widget = combo
                    combo_values = "Simulation", "Estimation"
                    type = string
                    default_value = "Simulation"
                    no_evaluate

                    CODE property_value_changed
                        mdl.refresh_icon(container_handle)
                    ENDCODE
                }

                CODE define_icon
                    images = {"Simulation": "emr_images/emr_energy_source.svg",
                                "Estimation": "emr_images/emr_estimation_source.svg"}
                
                    block_type = mdl.get_property_value(mdl.prop(item_handle, "block_type"))
                    mdl.set_component_icon_image(item_handle, images[block_type])
                ENDCODE

                CODE open
                    from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                
                    dialog = RegularComponentPropertiesDialog(
                        component=component,
                        property_container=component.masks[-1],
                        current_diagram=current_diagram
                    )
                    dialog.exec_()
                    
                ENDCODE
            }

            CODE component_init
                component.unlink()
            ENDCODE
        }
        [
            position = 8800, 8128
            scale = -1, -1
            size = 80, 64
        ]

        connect Battery.P1 Inverter.P1 as Connection97
        connect Battery.P2 Inverter.P2 as Connection98
        connect "Duty Cycle.out" Inverter.P5 as Connection99
        connect Inverter.P3 "Machine Inductance.P1" as Connection100
        connect "Machine Inductance.P2" Inverter.P4 as Connection101
        connect "Machine Inductance.P4" "DC Machine.P2" as Connection102
        connect "DC Machine.P1" "Machine Inductance.P3" as Connection103
        connect "DC Machine.P4" Gearbox.P2 as Connection104
        connect "DC Machine.P3" Gearbox.P1 as Connection105
        connect Differential.P1 Gearbox.P3 as Connection106
        connect Gearbox.P4 Differential.P2 as Connection107
        connect Differential.P4 "Left Wheel.P2" as Connection108
        connect "Left Wheel.P1" Differential.P3 as Connection109
        connect "Right Wheel.P2" Differential.P6 as Connection110
        connect Differential.P5 "Right Wheel.P1" as Connection111
        connect Coupling.P6 "Left Wheel.P3" as Connection112
        connect "Left Wheel.P4" Coupling.P5 as Connection113
        connect Coupling.P4 "Right Wheel.P3" as Connection114
        connect "Right Wheel.P4" Coupling.P3 as Connection115
        connect Chassis.P2 Coupling.P1 as Connection116
        connect Coupling.P2 Chassis.P1 as Connection117
        connect Chassis.P3 Environment.P2 as Connection118
        connect Environment.P1 Chassis.P4 as Connection119
    }

    default {
        gen_gain {
            gain = "1"
            multiplication = "Element-wise(K.*u)"
            _tunable = "False"
            execution_rate = "inherit"
        }

        gen_probe {
            addr = "0"
            override_signal_name = "False"
            signal_name = ""
            signal_type = "generic"
            streaming_en = "False"
            streaming_er_idx = "0"
            execution_rate = "inherit"
        }

        gen_product {
            signs = "2"
            execution_rate = "inherit"
        }

        gen_sum {
            signs = "2"
            execution_rate = "inherit"
        }

        gen_z_domain_transfer {
            domain = "Z-domain"
            method = "Zero-order hold"
            b_coeff = "[1,1]"
            a_coeff = "[1,1]"
            signal_out_type = "inherit"
            execution_rate = "inherit"
        }

        src_constant {
            value = "1"
            signal_type = "real"
            execution_rate = "100e-6"
            _tunable = "False"
        }

        src_scada_input {
            addr = "0"
            format = "real"
            override_signal_name = "False"
            signal_name = ""
            signal_type = "real"
            min = "-1e6"
            max = "1e6"
            def_value = "0"
            unit = " "
            execution_rate = "100e-6"
        }

        tm_delay {
            init_value = "0"
            signal_out_type = "inherit"
            execution_rate = "inherit"
        }
    }

    CODE model_init
        # Numpy module is imported as 'np'
        # Scipy module is imported as 'sp'
        
        
        # *****************************************************************
        #                           Battery
        # *****************************************************************
        V_batt = 300.0            # Battery Voltage considered constant
        duty = 0.5
            
        # *****************************************************************
        #         Principal characteristics of the traction machine
        # *****************************************************************
        
        # --- DCM Parameters ---
        # --- DCM by separately excited of 32 kW ---
            
        U_arm_nom = 400.0                       # Nominal voltage of the armature (V)
        I_arm_nom = 89.5                      # Nominal Current of the armature (A)
        N_nom = 2840.0                          # Nominal speed (tr/min)
        N_max = 6000.0                          # Maximal speed (tr/min)
        W_nom = 2.0*np.pi/60.0*N_nom                 # Nominal speed (rad/s)
        P_arm_nom = U_arm_nom*I_arm_nom       # Nominal electrical power of the armature (W)
        P_util_nom = 32e3                     # Nominal useful power (W)
        J = 0.12                              # Rotor Inertia (kg.m^2)
        M = 155                               # Machine mass
        
        # --- Armature winding ---
        R_arm = 0.35          # Armature resistance (Ohm)
        L_arm = 6.5e-3        # Armature inductance (H)
        
        K_arm = 1.0/R_arm       # Gain of the armature transfer function
        T_arm = L_arm/R_arm   # Time constant of the armature transfer function (s)
        
        # --- Electromechanical conversion ---
                
        Kcfiexc_dcm = (U_arm_nom-R_arm*I_arm_nom)/(W_nom)            # Torque Coefficient via the excitation Flux
        
        # *****************************************************************
        #                      Kinematic chain
        # *****************************************************************
        
        Dwheel = 0.52                            # Wheel diameter (m)
        Rwheel = Dwheel/2.0                      # Wheel radius (m)
        Jwheel = 4.3                             # Wheel inertia (kg.m^2)
        red = 5.0                                # Reduction ratio of the gearbox
        eff_gear_diff = 0.8                      # Efficiency of the gearbox and the differential
        
        Meq = 1.0e3                              # Equivalent mass (shaft + chassis)
        K_chas = 1.0/Meq                         # Velocity gain
        
        # --- Mechanical source parameters ---  
        
        wheelbase = 2.4                          # Wheelbase
        w_ev = 1.6                               # EV width (m)
        g = 9.81                                 # gravity (m/s^2)
        A = 2.0                                  # Frontal aera (m^2)
        Cx = 0.35                                # Drag coefficient
        ro = 1.223                               # Density of the air with 20 C under 1013 mbar (kg/m^3)
        Kaero = ro*Cx*A/2.0                      # Constant for the resistance force to aerodynamics
        
        # *****************************************************************
        #                       Control parameters
        # *****************************************************************
        
        
        # *****************************************************************
        #                            Turning
        # *****************************************************************
        # --- Trajectory of the turning radius ---
        
        rwh_ref= 1.0
        lwh_ref= 1.0
        
        # *****************************************************************
        #                    Simulation parameters
        # *****************************************************************
        
        # --- Global simulation ---
        Ts = 100e-6
    ENDCODE
}
